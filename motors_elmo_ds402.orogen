name "motors_elmo_ds402"

using_library "motors_elmo_ds402"
using_library "base-types"

import_types_from "canbus"
import_types_from "base/JointState.hpp"
import_types_from "base/samples/Joints.hpp"
import_types_from "motors_elmo_ds402Types.hpp"
import_types_from "motors_elmo_ds402/MotorParameters.hpp"
import_types_from "canopen_master"

# Base functionality
task_context "BaseTask" do
    abstract
    needs_configuration

    # The driver's CAN ID
    property "can_id", "/int"

    # Parameters to convert from internal values to SI values
    property "motor_parameters", "/motors_elmo_ds402/MotorParameters"

    # The incoming CAN packets
    input_port("can_in", "/canbus/Message").
        needs_reliable_connection
    # The outgoing CAN packets
    output_port "can_out", "/canbus/Message"

    port_driven 'can_in'

    exception_states 'SDO_TIMED_OUT', 'NMT_TIMED_OUT'
end

# Task that monitors a driver's status
task_context "ReaderTask", subclasses: "BaseTask" do
    # How the fields are meant to be read
    property "tpdo_configuration", "/canopen_master/PDOCommunicationParameters"

    # The zero position in encoder ticks
    property 'zero_position', 'int64_t', 0

    # The JointState fields required in the joint_state_samples items
    #
    # Not requesting all fields allows to optimize the traffic on the CAN bus
    # (it's roughly 2 fields per CAN packet)
    property "required_joint_states", "/motors_elmo_ds402/RequiredJointStates"

    # The fields that are being read
    output_port "joints_state_samples", "/base/samples/Joints"

    # The raw encoder values, before they are converted to angles
    output_port "raw_encoder_samples", "/motors_elmo_ds402/RawEncoders"
end

task_context "WriterTask", subclasses: "BaseTask" do
    # How the setpoint is meant to be written
    property "rpdo_configuration", "/canopen_master/PDOCommunicationParameters"

    # The control mode
    property "control_mode", "/base/JointState/MODE"

    input_port "joint_command", "/base/samples/Joints"

    # The difference between the realtime and logical time from the joints,
    # at the moment where we output the CAN message
    output_port 'latency', '/base/Time'

    port_driven

    exception_states "INVALID_COMMAND"
end
